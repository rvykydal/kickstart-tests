#!/bin/bash
#{{ ansible_managed }}

set -x

TEST_REMOTES="{{ kstest_test_remotes | default(groups['kstest']|join(' ')) }}"
KSTEST_PLATFORM="{{ kstest_platform }}"
KSTEST_OVERRIDE_REPOS="{{ kstest_override_repos }}"
KSTEST_URL="{{ kstest_url }}"
KSTEST_FTP_URL="{{ kstest_ftp_url}}"
BOOT_ISO_URL="{{ kstest_boot_iso_url }}"
TEST_JOBS={{ kstest_test_jobs }}
KSTESTS="{{ kstest_tests_to_run }}"
TEST_TYPE="{{ kstest_test_type }}"
SKIP_TYPES="{{ kstest_skip_test_types }}"
REMOTE_RESULTS_PATH="{{ kstest_remote_results_path }}"
REMOTE_RESULTS_KEEP_LOCAL="{{ kstest_remote_results_keep_local }}"
RESULTS_SUMMARY_SCRIPT="{{ kstest.master.results_summary_script.dest }}"
UPDATES_IMAGE="{{ kstest_updates_img }}"
ADDITIONAL_BOOT_OPTIONS="{{ kstest_additional_boot_options }}"
TEST_DEFAULTS_FILE=scripts/defaults.sh
FRAGMENTS_OVERRIDE_DIR="{{ kstest.master.fragments_override_dir}}"

COMPOSE_BOOT_ISO=images/boot.iso
KSTEST_USER=kstest
RESULTS_DIR={{ kstest.master.dir.results }}
KSTEST_REPO_DIR={{ kstest.master.dir.git_repo }}
GIT_PULL_KSTESTS={{ kstest_git_pull }}

HOME_DIR=/home/${KSTEST_USER}
KSTEST_REPO_PATH=${HOME_DIR}/${KSTEST_REPO_DIR}
RESULTS_PATH=${HOME_DIR}/${RESULTS_DIR}
RESULT_RUN_DIR_PREFIX={{ kstest_result_run_dir_prefix }}
BOOT_ISO=boot.kstest.iso
ISOMD5SUM_FILENAME={{ kstest.master.file.isomd5sum }}
RESULT_REPORT_FILENAME={{ kstest.master.file.result_report }}
TEST_PARAMETERS_FILENAME={{ kstest.master.file.test_parameters }}
LOG_FILENAME={{ kstest.master.file.log }}
RUN_FILE_PATH=${HOME_DIR}/{{ kstest.master.file.run }}
FRAGMENTS_OVERRIDE_PATH=${HOME_DIR}/${FRAGMENTS_OVERRIDE_DIR}

# Test run id
START_TIME=$(date +%F-%H_%M_%S)

TIME_OF_START=$(date +%s)

### Check run file (indicates a test is running)

if [[ -f ${RUN_FILE_PATH} ]]; then
    echo "A test seems to be already running, ${RUN_FILE_PATH} exists" >2
    exit 1
fi


### Create results directories

RESULTS_RUN_PATH="${RESULTS_PATH}/runs"
if [ ! -d ${RESULTS_RUN_PATH} ]; then
    mkdir -p ${RESULTS_RUN_PATH}
fi


### Create this test result dir

RESULT_PATH="${RESULTS_RUN_PATH}/${RESULT_RUN_DIR_PREFIX}${START_TIME}"
mkdir ${RESULT_PATH}


### Create run file

echo ${RESULT_PATH} > ${RUN_FILE_PATH}


### Cd to repository dir

cd ${KSTEST_REPO_PATH}


### Update git repository

if [[ "${GIT_PULL_KSTESTS}" != "no" ]]; then
  git reset --hard HEAD
  git pull
fi

GIT_REPO=$(git remote -v | grep fetch)
GIT_BRANCH=$(git name-rev --name-only HEAD)

# Set up parameters for test
cat >> ${TEST_DEFAULTS_FILE} <<- EOF
export TEST_REMOTES=${TEST_REMOTES}
export TEST_JOBS=${TEST_JOBS}
EOF

if [[ "${KSTEST_OVERRIDE_REPOS}" != "no" ]]; then

    # scripts/defaults.sh
    if [[ -n "${KSTEST_URL}" ]]; then
        echo "export KSTEST_URL=${KSTEST_URL}" >> ${TEST_DEFAULTS_FILE}
    fi
    if [[ -n "${KSTEST_FTP_URL}" ]]; then
        echo "export KSTEST_FTP_URL=${KSTEST_FTP_URL}" >> ${TEST_DEFAULTS_FILE}
    fi

fi

TIME_OF_UPDATING_REPO=$(date +%s)


### Store test parameters

TEST_PARAMETERS_FILE="${RESULT_PATH}/test_parameters.txt"
cat > ${TEST_PARAMETERS_FILE} <<- EOF
KSTEST_OVERRIDE_REPOS=${KSTEST_OVERRIDE_REPOS}
KSTEST_URL=${KSTEST_URL}
BOOT_ISO_URL=${BOOT_ISO_URL}
TEST_REMOTES=${TEST_REMOTES}
TEST_JOBS=${TEST_JOBS}
UPDATES_IMAGE=${UPDATES_IMAGE}
GIT_REPO=${GIT_REPO}
GIT_BRANCH=${GIT_BRANCH}
EOF


### Download the boot.iso

rm -f ${BOOT_ISO}
curl "${BOOT_ISO_URL}" -o ${BOOT_ISO}

ISO_MD5_SUM=$(md5sum ${BOOT_ISO})

TIME_OF_DOWNLOADING_ISO=$(date +%s)


### Drop iso md5sum info into results

ISO_MD5_SUM_FILE="${RESULT_PATH}/${ISOMD5SUM_FILENAME}"
echo ${ISO_MD5_SUM} > ${ISO_MD5_SUM_FILE}


### Use updates image

UPDATES_IMAGE_ARG=""
if [[ -n "${UPDATES_IMAGE}" ]]; then
    UPDATES_IMAGE_ARG="-u ${UPDATES_IMAGE}"
fi


### Use additional boot options

ADDITIONAL_BOOT_OPTIONS_ARG=""
if [[ -n "${ADDITIONAL_BOOT_OPTIONS}" ]]; then
    ADDITIONAL_BOOT_OPTIONS_ARG="-b \"${ADDITIONAL_BOOT_OPTIONS}\""
fi

### Run tests of specified type

TEST_TYPE_ARG=""
if [[ -n "${TEST_TYPE}" ]]; then
    TEST_TYPE_ARG="-t ${TEST_TYPE}"
fi

SKIP_TEST_TYPES_ARG=""
if [[ -n "${SKIP_TYPES}" ]]; then
    SKIP_TEST_TYPES_ARG="-s ${SKIP_TYPES}"
fi

### Use platform for tests
PLATFORM_ARG=""
if [[ -n "${KSTEST_PLATFORM}" ]]; then
    PLATFORM_ARG="-p ${KSTEST_PLATFORM}"
fi


### Override software repositories
OVERRIDE_ARG=""
if [[ "${KSTEST_OVERRIDE_REPOS}" != "no" ]]; then
    OVERRIDE_ARG="-o ${FRAGMENTS_OVERRIDE_PATH}"
fi


### Run the test

RESULT_LOG="${RESULT_PATH}/${LOG_FILENAME}"
scripts/run_kickstart_tests.sh -i ${BOOT_ISO} -k 1 ${UPDATES_IMAGE_ARG} ${ADDITIONAL_BOOT_OPTIONS_ARG} ${TEST_TYPE_ARG} ${SKIP_TEST_TYPES_ARG} ${PLATFORM_ARG} ${OVERRIDE_ARG} ${KSTESTS} 2>&1 | tee ${RESULT_LOG}


### Create result

RESULT_REPORT="${RESULT_PATH}/${RESULT_REPORT_FILENAME}"
scripts/run_report.sh ${RESULT_LOG} > ${RESULT_REPORT}

TIME_OF_RUNNING_TESTS=$(date +%s)


### Cd back from the repository dir

cd -


### Store logs

# Fixup permissions
sudo chown -R ${KSTEST_USER}:${KSTEST_USER} /var/tmp/kstest-*
sudo chmod -R a+r /var/tmp/kstest-*
# Clean up
find /var/tmp/kstest-* -name "*.iso" -delete
find /var/tmp/kstest-* -name "*.img" -delete
# Move to results directory
mv /var/tmp/kstest-* ${RESULT_PATH}


### Create history result

if [[ -n "${RESULTS_SUMMARY_SCRIPT}" ]]; then
    ${HOME_DIR}/${RESULTS_SUMMARY_SCRIPT} ${RESULTS_RUN_PATH} ${RESULT_REPORT_FILENAME} ${ISOMD5SUM_FILENAME} > "${RESULTS_PATH}/index.html"
fi

TIME_OF_RESULTS_PROCESSING=$(date +%s)


### Gather results of timing

TINFO=""

for timevar in $(awk -F"=" '/^TIME_OF_*/ {print $1}' $0); do
    timestamp=${!timevar}
    if [ -n "$LAST" ]; then
        secs=$(($timestamp - $LAST))
        human=$(date -u -d @${secs} +"%T")
        TINFO+=" $timevar: ${human} (${secs}s)"
    fi
    LAST=$timestamp
done
# Update test parameters with time info
echo "# Time consumed: ${TINFO}" >> ${TEST_PARAMETERS_FILE}


### Remove run file

rm ${RUN_FILE_PATH}


### Sync results to remote host

if [[ -n "${REMOTE_RESULTS_PATH}" ]]; then
    rsync -avz ${RESULTS_PATH} ${REMOTE_RESULTS_PATH}
    if [[ "${REMOTE_RESULTS_KEEP_LOCAL}" == "no" ]]; then
        rm -rf ${RESULT_PATH}
    fi
fi
