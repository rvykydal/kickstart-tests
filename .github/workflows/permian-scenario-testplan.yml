# Run all kickstart tests for all active branches in Permian
name: Daily run - Permian - testplans
on:
  workflow_dispatch:
    ref: permian-scenario

jobs:
  scenario:
    name: Scenario in Permian
    runs-on: [self-hosted, kstest-permian]
    strategy:
      matrix:
        scenario: [daily-iso, rhel8, rhel9]
        #scenario: [small]
      fail-fast: false

    # these settings depend on the infrastructure; on upshift ocp-master-xxl they take about 4 hours
    timeout-minutes: 480
    env:
      TEST_JOBS: 16
      GITHUB_TOKEN: /home/github/github-token

    steps:
      # self-hosted runners don't do this automatically; also useful to keep stuff around for debugging
      # need to run sudo as the launch script and the container create root/other user owned files
      - name: Clean up previous run
        run: |
          sudo podman ps -q --all --filter='ancestor=kstest-runner' | xargs -tr sudo podman rm -f
          sudo podman volume rm --all || true
          sudo rm -rf *

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          path: kickstart-tests
          ref: permian-scenario

      - name: Generate test cases
        working-directory: ./kickstart-tests
        run: scripts/generate-testcases.py -t ./testlib/test_cases/kstest-template.tc.yaml.j2 . -o ./testlib/test_cases

      - name: Clone Permian repositories
        run: |
          git clone https://gitlab.cee.redhat.com/zveleba/permian.git --branch kstest-daily-scenario
          git clone https://github.com/rhinstaller/tclib.git

      # use the latest official packages for the nightly runs
      - name: Clean up squid cache
        run: sudo containers/squid.sh clean
        working-directory: ./kickstart-tests

      - name: Ensure http proxy is running
        run: sudo containers/squid.sh start
        working-directory: ./kickstart-tests

      - name: Set platform from scenario
        id: platfrom_from_scenario
        run: |
          set -eux
          SCENARIO="${{ matrix.scenario }}"
          if [ "${SCENARIO}" == "rhel8" ]; then
            echo "::set-output name=platform::rhel8"
          elif [ "${SCENARIO}" == "rhel9" ]; then
            echo "::set-output name=platform::rhel9"
          elif [ "${SCENARIO}" == "daily-iso" ]; then
            echo "::set-output name=platform::fedora"
          else
            echo "::set-output name=platform::fedora"
            echo "Scenario ${SCENARIO} can't be mapped to platform"
          fi

      - name: Run scenario ${{ matrix.scenario }} in container
        working-directory: ./permian
        run: PYTHONPATH=${PYTHONPATH:-}:${{ github.workspace }}/tclib ./pipeline --debug-log permian.log -o library.directPath="${{ github.workspace }}/kickstart-tests/testlib" -o kickstart_test.retry_on_failure=True -o workflows.dry_run=True -o kickstart_test.kstest_local_repo="${{ github.workspace }}/kickstart-tests" run_event '{"type":"github.scheduled.daily.kstest","scenario":{"scenario":"${{ matrix.scenario }}","platform":"${{ steps.platform_from_scenario.outputs.platform }}"}}'

      - name: Collect anaconda logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-${{ matrix.scenario }}'
          # skip the /anaconda subdirectories, too large
          path: |
            kickstart-tests/data/logs/kstest.log
            kickstart-tests/data/logs/kstest-*/*.log
            kickstart-tests/data/logs/kstest-*/anaconda/lorax-packages.log

      - name: Collect pipeline logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-permian-${{ matrix.scenario }}'
          path: |
            permian/permian.log
